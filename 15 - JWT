🔐 توضیح کامل JWT (JSON Web Token) و ساختار آن برای امنیت وب

🧱 ساختار JWT: سه بخش اصلی
توکن JWT از سه بخش تشکیل شده که با نقطه (.) جدا می‌شوند:
header.payload.signature

1️⃣ هدر (Header)
- حاوی متادیتای توکن است
- شامل نوع توکن و الگوریتم امضا
- مثال:
{
  "alg": "HS256",
  "typ": "JWT"
}

2️⃣ پیلود (Payload)
- حاوی داده‌ها و claims (ادعاها) است
- شامل اطلاعات کاربر و متادیتا
- مثال:
{
  "userid": "John",
  "email": "john@test.com",
  "exp": 1427321171,
  "sub": "78954"
}

3️⃣ امضا (Signature)
- برای تأیید اصالت و یکپارچگی توکن
- از ترکیب هدر، payload و یک کلید مخفی ایجاد می‌شود


 🔄 نحوه کار احراز هویت با JWT:
 مراحل کار:
1. ورود کاربر 📨
   - کلاینت نام کاربری و رمز عبور را ارسال می‌کند
   
2. تأیید اعتبار ✅
   - سرور اعتبار کاربر را بررسی می‌کند

3. ایجاد JWT 🛠
   - سرور یک JWT ایجاد و امضا می‌کند

4. ارسال توکن 📤
   - توکن JWT به کلاینت بازگردانده می‌شود

5. درخواست‌های بعدی 🔄
   - کلاینت JWT را در هدر Authorization ارسال می‌کند

6. اعتبارسنجی 🔍
   - سرور امضا را بررسی و داده‌ها را استخراج می‌کند

 🔐 انواع امضاها در JWT:

 1️⃣ امضاهای متقارن (Symmetric)
- استفاده از یک کلید مشترک
- الگوریتم‌هایی مثل HS256
- مناسب برای سیستم‌های متمرکز

 2️⃣ امضاهای نامتقارن (Asymmetric)
- استفاده از جفت کلید عمومی/خصوصی
- الگوریتم‌هایی مثل RS256
- امن‌تر و مناسب برای سیستم‌های توزیع‌شده

 💡 مزایای JWT:
- بدون حالت (Stateless): نیاز به ذخیره session در سرور ندارد
- مقیاس‌پذیر: مناسب برای معماری‌های سرویس
- امن: امضای دیجیتال از جعل جلوگیری می‌کند
- چندپلتفرمی: قابل استفاده در وب، موبایل و API

 ⚠️ ملاحظات امنیتی:
- همیشه از HTTPS استفاده کنید
- زمان انقضای مناسب تنظیم کنید
- از الگوریتم‌های قوی استفاده کنید
- کلیدهای خود را به صورت امن مدیریت کنید

   t.me/Chaos_nexus_tech

   ====================================
